version: '3.9'

services:
  # ===== БД =====
  db:
    image: postgres:17-alpine
    container_name: postgres_db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - '${POSTGRES_LOCAL_PORT}:${POSTGRES_PORT}'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - private_django
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5

  # ===== Core Django =====
  core:
    build:
      context: ./core
    container_name: core
    entrypoint: /entrypoint.sh
    command: bash -c "python manage.py runserver 0.0.0.0:${DJANGO_PORT}"
    restart: on-failure
    volumes:
      - ./core:/app
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - '${DJANGO_PORT}:${DJANGO_PORT}'
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - private_django


  web:
    build:
      context: ./web
    container_name: web
    command: sh -c "yarn install && yarn dev"
    volumes:
      - ./web:/app
      - web_node_modules:/app/node_modules
    ports:
      - '${NEXT_PORT}:3000'
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://core:${DJANGO_PORT}/api
    depends_on:
      - core
    networks:
      - public_network



volumes:
  postgres_data:
  media_volume:
  static_volume:
  web_node_modules:
  poetry_cache:

networks:
  private_django:
    internal: true
  public_network:
    driver: bridge
